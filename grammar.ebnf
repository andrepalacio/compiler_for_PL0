/* TOKENS */

FUN ::= 'fun\b'
BEGIN ::= 'begin\b'
END ::= 'end\b'
IF ::= 'if\b'
THEN ::= 'then\b'
ELSE ::= 'else\b'
WHILE ::= 'while\b'
DO ::= 'do\b'
PRINT ::= 'print\b'
READ ::= 'read\b'
WRITE ::= 'write\b'
RETURN ::= 'return\b'
SKIP ::= 'skip\b'
BREAK ::= 'break\b'
AND ::= 'and\b'
OR ::= 'or\b'
NOT ::= 'not\b'
TINT ::= 'int\b'
TFLOAT ::= 'float\b'
ASSIGN ::= ':='
VARDECL ::= ':'
EQ ::= '=='
NEQ ::= '!='
LTE ::= '<='
LT ::= '<'
GTE ::= '>='
GT ::= '>'
PLUS ::= '\+'
MINUS ::= '-'
TIMES ::= '\*'
DIVIDE ::= '/'
LPAREN ::= '\('
RPAREN ::= '\)'
LBRACE ::= '\{'
RBRACE ::= '\}'
SEMICOLON ::= ';'
COMMA ::= ','
LBRACKET ::= '\['
RBRACKET ::= '\]'

ID ::= '[a-zA-Z_][a-zA-Z0-9_]*'

STRING ::= '"(?:\\["n\\]|[^"\\])+"'
INT ::= '(([1-9]\d*)|0)(?![^\s,;\)\}\]])'
FLOAT ::= '(0|[1-9]\d*)(\.\d+)?(\d[e][+-]?\d+)?(?![^\s,;\)])'
COMMENT ::= '/\*[\s\S]*?\*/'

ignore ::= ' \t\r'
uncompleted_comment ::='/\*.*[\s\S]*(?!\*/)'
newlines ::= '\n+'
error_handling ::= '[^\s]+'


/* GRAM√ÅTICA */

program ::= func* funcMain EOF

func ::= 'fun' ID '(' argList ')' var* 'begin' statement* 'end' 

statement ::= 'while' relation 'do' statement
    | 'if' relation 'then' statement
    | 'if' relation 'then' statement 'else' statement
    | ID ':=' expr ';'?
    | 'print' '(' literal ')' ';'?
    | 'write' '(' expr ')' ';'?
    | 'read' '(' location ')' ';'?
    | 'return' expr
    | ID '(' exprList ')' ';'?
    | 'skip'
    | 'break'
    | 'begin' statements 'end' ';'
    
relation ::= expr '<' expr
    | expr '<=' expr
    | expr '>' expr
    | expr '>=' expr
    | expr '==' expr
    | expr '!=' expr
    | relation 'and' relation
    | relation 'or' relation
    | 'not' relation
    | '(' relation ')'
    
exprList ::= expr (',' exprList)? e

expr ::= expr '+' expr
    | expr '-' expr
    | expr '*' expr
    | expr '/' expr
    | '-' expr
    | '+' expr
    | '(' expr ')'
    | ID '(' exprList ')'
    | ID
    | ID '[' expr ']'
    | number
    | int '(' expr ')'
    | float '(' expr ')'

argList ::= arg (',' argList)?

arg ::= ID ':' int
    | ID ':' float
    | ID ':' int '[' INT ']'
    | ID ':' float '[' INT ']'

var ::= ID ':' int ';'
    | ID ':' float ';'
    | ID ':' int '[' INT ']' ';'
    | ID ':' float '[' INT ']' ';'

number ::= INT
    | FLOAT
    | '-' INT
    | '-' FLOAT

location ::= ID
    | ID '[' INT ']'