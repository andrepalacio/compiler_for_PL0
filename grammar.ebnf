/* TOKENS */

AND ::= r'and'
OR ::= r'or' 
NOT ::= r'not' 
COMMA ::= r',' 
SEMI ::= r';' 
QUOTE ::= r'"'
LPAREN ::= r'('
RPAREN ::= r')'
LSQUAR ::= r'['
RSQUAR ::= r']'
LCURLY ::= r'{'
RCURLY ::= r'}'
FUN ::= r'fun'
BEGIN ::= r'begin'
END ::= r'end'
MAIN ::= r'main'
WHILE ::= r'while'
DO ::= r'do'
IF ::= r'if'
THEN ::= r'then'
ELSE ::= r'else'
ASSIGN ::= r':='
PRINT ::= r'print'
WRITE ::= r'write'
READ ::= r'read'
RETURN ::= r'return'
SKIP ::= r'skip'
BREAK ::= r'break'
LT ::= r'<'
LE ::= r'<='
GT ::= r'>'
GE ::= r'>='
EQ ::= r'=='
NE ::= r'!='
MINUS ::= r'-'
PLUS ::= r'+'
TIMES ::= r'*'
DIVIDE ::= r'/'
VAR ::= r':'
TINT ::= r'int'
TFLOAT ::= r'float'

INT = r'\d+'
FLOAT = r'\|\d+.\d+'
ID::= r'[a-zA-Z_][a-zA-Z_0-9]*'
ignore::= [ \t\n\r]+
STRING : r'"(?:[^"\\]|\\["\\n])*"'
COMMENTARY : r'/\*.\*/'

/* GRAM√ÅTICA */

program ::= func* funcMain EOF

func ::= 'fun' ID '(' argList ')' var* 'begin' statement* 'end' 

statement ::= 'while' relation 'do' statement
    | 'if' relation 'then' statement
    | 'if' relation 'then' statement 'else' statement
    | ID ':=' expr ';'?
    | 'print' '(' literal ')' ';'?
    | 'write' '(' expr ')' ';'?
    | 'read' '(' location ')' ';'?
    | 'return' expr
    | ID '(' exprList ')' ';'?
    | 'skip'
    | 'break'
    | 'begin' statements 'end' ';'
    
relation ::= expr '<' expr
    | expr '<=' expr
    | expr '>' expr
    | expr '>=' expr
    | expr '==' expr
    | expr '!=' expr
    | relation 'and' relation
    | relation 'or' relation
    | 'not' relation
    | '(' relation ')'
    
exprList ::= expr (',' exprList)? e

expr ::= expr '+' expr
    | expr '-' expr
    | expr '*' expr
    | expr '/' expr
    | '-' expr
    | '+' expr
    | '(' expr ')'
    | ID '(' exprList ')'
    | ID
    | ID '[' expr ']'
    | number
    | int '(' expr ')'
    | float '(' expr ')'

argList ::= arg (',' argList)?

arg ::= ID ':' int
    | ID ':' float
    | ID ':' int '[' INT ']'
    | ID ':' float '[' INT ']'

var ::= ID ':' int ';'
    | ID ':' float ';'
    | ID ':' int '[' INT ']' ';'
    | ID ':' float '[' INT ']' ';'

number ::= INT
    | - INT
    | FLOAT
    | - FLOAT

location ::= ID
    | ID '[' INT ']'